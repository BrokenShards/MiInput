<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MiCore</name>
    </assembly>
    <members>
        <member name="T:MiCore.JobList">
            <summary>
              A list of jobs that share the same priority.
            </summary>
        </member>
        <member name="M:MiCore.JobList.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiCore.JobList.#ctor(MiCore.JobList)">
            <summary>
              Copy constructor.
            </summary>
            <param name="list">
              The object to copy.
            </param>
            <exception cref="T:System.ArgumentNullException">
              If list is null.
            </exception>
        </member>
        <member name="M:MiCore.JobList.#ctor(MiCore.MiJob[])">
            <summary>
              Constructs the object with one or multiple jobs.
            </summary>
            <param name="list">
              List of jobs to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
              If list is null.
            </exception>
        </member>
        <member name="P:MiCore.JobList.Item(System.Int32)">
            <summary>
              Job accessor by index.
            </summary>
            <param name="index">
              Job index.
            </param>
            <returns>
              The job at the given index or null if index is invalid.
            </returns>
        </member>
        <member name="P:MiCore.JobList.Empty">
            <summary>
              If the list contains no jobs.
            </summary>
        </member>
        <member name="P:MiCore.JobList.Count">
            <summary>
              The amount of jobs in the list.
            </summary>
        </member>
        <member name="P:MiCore.JobList.Jobs">
            <summary>
              An array containing all jobs in the list.
            </summary>
        </member>
        <member name="M:MiCore.JobList.Contains(MiCore.MiJob)">
            <summary>
              If the list contains the given job.
            </summary>
            <param name="job">
              The job to check.
            </param>
            <returns>
              True if the job exists within the list.
            </returns>
        </member>
        <member name="M:MiCore.JobList.IndexOf(MiCore.MiJob)">
            <summary>
              Gets the index of a job contained in the list.
            </summary>
            <param name="job">
              The job to check.
            </param>
            <returns>
              The index of the job if it exists within the list, otherwise -1.
            </returns>
        </member>
        <member name="M:MiCore.JobList.Get(System.Int32)">
            <summary>
              Gets the job at the given index.
            </summary>
            <param name="index">
              Job index.
            </param>
            <returns>
              The job at the given index or null if the index is out of range.
            </returns>
        </member>
        <member name="M:MiCore.JobList.Set(System.Int32,MiCore.MiJob)">
            <summary>
              Replaces the job at the index with the given job.
            </summary>
            <remarks>
              If index == Count, <see cref="M:MiCore.JobList.Add(MiCore.MiJob[])"/> will be called instead.
              If job == null, <see cref="M:MiCore.JobList.Remove(System.Int32)"/> will be called instead.
            </remarks>
            <param name="index">
              The job index.
            </param>
            <param name="job">
              The job to add or null to remove an existing job.
            </param>
            <returns>
              True if index is within range, job is valid or null and was added/removed 
              successfully, or if the job already existed at the index, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.JobList.Insert(System.Int32,MiCore.MiJob)">
            <summary>
              Inserts the given job at the given index. If the job already exists within the list,
              it will be removed first.
            </summary>
            <remarks>
              If index == Count, <see cref="M:MiCore.JobList.Add(MiCore.MiJob[])"/> is called instead.
            </remarks>
            <param name="index">
              The job index.
            </param>
            <param name="job">
              The job to insert.
            </param>
            <returns>
              True if index is within range, job is valid and was added successfully, otherwise
              false.
            </returns>
        </member>
        <member name="M:MiCore.JobList.Add(MiCore.MiJob[])">
            <summary>
              Adds one or multiple jobs to the list.
            </summary>
            <param name="jobs">
              The jobs to add.
            </param>
            <returns>
              True if jobs was valid and all jobs were added successfully.
            </returns>
        </member>
        <member name="M:MiCore.JobList.Remove(System.Int32)">
            <summary>
              Removes the job at the given index.
            </summary>
            <param name="index">
              The job index.
            </param>
            <returns>
              True if index was within range and the job was removed successfully.
            </returns>
        </member>
        <member name="M:MiCore.JobList.Remove(MiCore.MiJob[])">
            <summary>
              Removes one or multiple jobs.
            </summary>
            <param name="jobs">
              The job(s) to remove.
            </param>
            <returns>
              The amount of jobs that were successfully removed.
            </returns>
        </member>
        <member name="M:MiCore.JobList.RemoveAll">
            <summary>
              Removes all jobs from the list.
            </summary>
        </member>
        <member name="M:MiCore.JobList.Run(MiCore.MiEntity)">
            <summary>
              Runs all jobs in the list on the entity.
            </summary>
            <param name="e">
              The entity to run the job list on.
            </param>
        </member>
        <member name="M:MiCore.JobList.RunASync(MiCore.MiEntity)">
            <summary>
              Runs all jobs asyncronously in the list on the entity.
            </summary>
            <param name="e">
              The entity to run the job list on.
            </param>
        </member>
        <member name="M:MiCore.JobList.Equals(MiCore.JobList)">
            <summary>
              Checks if this object is equal to another.
            </summary>
            <param name="list">
              The object to check against.
            </param>
            <returns>
              True if the given object is concidered equal to this object, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.JobList.GetEnumerator">
            <summary>
              Gets an enumerator that can be used to iterate through the collection.
            </summary>
            <returns>
              An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:MiCore.MiComponent">
            <summary>
              Base class for components.
            </summary>
        </member>
        <member name="M:MiCore.MiComponent.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiCore.MiComponent.#ctor(MiCore.MiComponent)">
            <summary>
              Copy constructor.
            </summary>
            <param name="comp">
              The object to copy.
            </param>
        </member>
        <member name="P:MiCore.MiComponent.RequiredComponents">
            <summary>
              Contains the types of components required by this component type.
            </summary>
        </member>
        <member name="P:MiCore.MiComponent.IncompatibleComponents">
            <summary>
              Contains the types of components incompatible with this component type.
            </summary>
        </member>
        <member name="P:MiCore.MiComponent.TypeName">
            <summary>
              The component type name.
            </summary>
        </member>
        <member name="P:MiCore.MiComponent.Stack">
            <summary>
              The component stack that owns the component.
            </summary>
        </member>
        <member name="P:MiCore.MiComponent.Parent">
            <summary>
              The entity that owns the component stack.
            </summary>
        </member>
        <member name="M:MiCore.MiComponent.Requires(System.String)">
            <summary>
              Checks if the component requires a component with the given component name.
            </summary>
            <param name="typename">
              The name of the component to check.
            </param>
            <returns>
              True if the component requires on the given component type name.
            </returns>
        </member>
        <member name="M:MiCore.MiComponent.Requires(System.Type)">
            <summary>
              Checks if the component requires a component of the given type.
            </summary>
            <param name="type">
              The component type.
            </param>
            <returns>
              True if the component requires on the given component type.
            </returns>
        </member>
        <member name="M:MiCore.MiComponent.Requires``1">
            <summary>
              Checks if the component requires a component of the given type.
            </summary>
            <typeparam name="T">
              The component type.
            </typeparam>
            <returns>
              True if the component requires on the given component type.
            </returns>
        </member>
        <member name="M:MiCore.MiComponent.Incompatible(System.String)">
            <summary>
              Checks if the component is incompatible with a component with the given component name.
            </summary>
            <param name="typename">
              The name of the component to check.
            </param>
            <returns>
              True if the component is incompatible with the given component type name.
            </returns>
        </member>
        <member name="M:MiCore.MiComponent.Incompatible(System.Type)">
            <summary>
              Checks if the component is incompatible with a component of the given type.
            </summary>
            <param name="type">
              The component type.
            </param>
            <returns>
              True if the component is incompatible with the given component type.
            </returns>
        </member>
        <member name="M:MiCore.MiComponent.Incompatible``1">
            <summary>
              Checks if the component is incompatible with a component of the given type.
            </summary>
            <typeparam name="T">
              The component type.
            </typeparam>
            <returns>
              True if the component is incompatible with the given component type.
            </returns>
        </member>
        <member name="M:MiCore.MiComponent.TextEntered(SFML.Window.TextEventArgs)">
            <summary>
              Called on TextEntered event.
            </summary>
            <param name="e">
              The event args.
            </param>
        </member>
        <member name="M:MiCore.MiComponent.OnTextEntered(SFML.Window.TextEventArgs)">
            <summary>
              Override this with your TextEntered logic.
            </summary>
            <param name="e">
              The event args.
            </param>
        </member>
        <member name="T:MiCore.ComponentRegister">
            <summary>
              Used for registering and creating components.
            </summary>
        </member>
        <member name="M:MiCore.ComponentRegister.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="P:MiCore.ComponentRegister.Manager">
            <summary>
              The register object.
            </summary>
        </member>
        <member name="P:MiCore.ComponentRegister.Empty">
            <summary>
              If no components are registered.
            </summary>
        </member>
        <member name="P:MiCore.ComponentRegister.Count">
            <summary>
              The amount of components registered.
            </summary>
        </member>
        <member name="M:MiCore.ComponentRegister.Registered``1">
            <summary>
              Checks if the given component type is registered.
            </summary>
            <typeparam name="T">
              The component type.
            </typeparam>
            <returns>
              True if the given component type is registered, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.ComponentRegister.Registered(System.String)">
            <summary>
              Checks if the given component type name is registered.
            </summary>
            <param name="typename">
              The component type name.
            </param>
            <returns>
              True if the given component type name is registered, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.ComponentRegister.Registered(System.Type)">
            <summary>
              Checks if the given component type is registered.
            </summary>
            <param name="type">
              The component type.
            </param>
            <returns>
              True if the given component type is registered, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.ComponentRegister.Register``1(System.Boolean)">
            <summary>
              Registers a component type.
            </summary>
            <typeparam name="T">
              The component type.
            </typeparam>
            <returns>
              True if the component type was registered successfully and false otherwise. This will
              only fail if `T.TypeName` is not a valid ID.
            </returns>
        </member>
        <member name="M:MiCore.ComponentRegister.Create``1">
            <summary>
              Creates a new component of the given type.
            </summary>
            <typeparam name="T">
              The component type.
            </typeparam>
            <returns>
              A new component of the given type or null if unregistered or unable to create.
            </returns>
        </member>
        <member name="M:MiCore.ComponentRegister.Create(System.String)">
            <summary>
              Creates a component from a given type name.
            </summary>
            <param name="typename">
              The component type name.
            </param>
            <returns>
              A new component if the type name was registered, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.ComponentRegister.GetEnumerator">
            <summary>
              Gets an enumerator to iterate through the collection.
            </summary>
            <returns>
              An enumerator to iterate through the collection.
            </returns>
        </member>
        <member name="T:MiCore.ComponentStack">
            <summary>
              Container for storing related components.
            </summary>
        </member>
        <member name="M:MiCore.ComponentStack.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiCore.ComponentStack.#ctor(MiCore.ComponentStack)">
            <summary>
              Copy constructor.
            </summary>
            <param name="cs">
              The object to copy.
            </param>
            <exception cref="T:System.InvalidOperationException">
              If unable to add cloned components.
            </exception>
        </member>
        <member name="M:MiCore.ComponentStack.#ctor(MiCore.MiEntity)">
            <summary>
              Constructor setting parent entity.
            </summary>
            <param name="parent">
              The owning parent entity
            </param>
        </member>
        <member name="P:MiCore.ComponentStack.Parent">
            <summary>
              The owning parent entity.
            </summary>
        </member>
        <member name="P:MiCore.ComponentStack.Empty">
            <summary>
              If the stack contains any components.
            </summary>
        </member>
        <member name="P:MiCore.ComponentStack.Count">
            <summary>
              The amount of components the stack contains.
            </summary>
        </member>
        <member name="M:MiCore.ComponentStack.GetIncompatibleComponents">
            <summary>
              Creates an array containing the names of all components incompatible with the existing
              components.
            </summary>
        </member>
        <member name="M:MiCore.ComponentStack.IsCompatible``1">
            <summary>
              Checks if a given component type is compatible with the current components.
            </summary>
            <typeparam name="T">
              The component type.
            </typeparam>
            <returns>
              True if the component type is registered, compatible and can be added, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.IsCompatible(System.String)">
            <summary>
              Checks if a given component type name is compatible with the current components.
            </summary>
            <param name="typename">
              The component type name.
            </param>
            <returns>
              True if the component type is registered, compatible and can be added, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.IsCompatible(MiCore.MiComponent)">
            <summary>
              Checks if a given component and its required components are compatible with the 
              current components.
            </summary>
            <param name="comp">
              The component.
            </param>
            <returns>
              True if the component and its requirements are registered, compatible and can be 
              added, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.Contains``1">
            <summary>
              Checks if the stack contains a component of the given type.
            </summary>
            <typeparam name="T">
              The component type.
            </typeparam>
            <returns>
              True if the stack contains a component with the given type, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.Contains(System.String)">
            <summary>
              Checks if the stack contains a component with the given type name.
            </summary>
            <param name="type">
              The component type name.
            </param>
            <returns>
              True if the stack contains a component with the given type name, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.IndexOf``1">
            <summary>
              Gets the index of the component with the given type.
            </summary>
            <typeparam name="T">
              The component type.
            </typeparam>
            <returns>
              A non-negative index if the stack contains a component with the given type,
              otherwise -1.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.IndexOf(System.String)">
            <summary>
              Gets the index of the component with the given type name.
            </summary>
            <param name="type">
              The component type name.
            </param>
            <returns>
              A non-negative index if the stack contains a component with the given type name,
              otherwise -1.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.Get(System.Int32)">
            <summary>
              Gets the component at the given index.
            </summary>
            <param name="index">
              The component index.
            </param>
            <returns>
              The component at the given index or null if the index is out of range.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.Get(System.String)">
            <summary>
              Gets the component with the given type name.
            </summary>
            <param name="typename">
              The component type name.
            </param>
            <returns>
              The component with the given type name if it exists, otherwise null.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.Get``1">
            <summary>
              Gets the component with the given type.
            </summary>
            <typeparam name="T">
              The component type.
            </typeparam>
            <returns>
              The component with the given type or null if it does not exist.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.AddNew``1(System.Boolean)">
            <summary>
              Adds a new component to the stack.
            </summary>
            <typeparam name="T">
              The component type to add.
            </typeparam>
            <param name="replace">
              Should an already existing component of the same type be replaced?
            </param>
            <returns>
              True if the component was added successfully, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.Add``1(``0,System.Boolean)">
            <summary>
              Adds a new existing component to the stack.
            </summary>
            <typeparam name="T">
              The component type to add.
            </typeparam>
            <param name="comp">
              The component to add.
            </param>
            <param name="replace">
              Should an already existing component of the same type be replaced?
            </param>
            <returns>
              True if the component was added successfully, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.Add(MiCore.MiComponent,System.Boolean)">
            <summary>
              Adds a component to the stack.
            </summary>
            <param name="comp">
              The component to add.
            </param>
            <param name="replace">
              If an already existing component should be replaced.
            </param>
            <returns>
              True if the component was added successfully, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.AddRange(System.Collections.Generic.IEnumerable{MiCore.MiComponent},System.Boolean)">
            <summary>
              Adds a range of components to the stack.
            </summary>
            <param name="comps">
              The component range to add.
            </param>
            <param name="replace">
              If an already existing component should be replaced.
            </param>
            <returns>
              True if comps is not null and all componenta were added successfully, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.AddRange(MiCore.ComponentStack,System.Boolean)">
            <summary>
              Clones and adds a range of components from another stack.
            </summary>
            <param name="stack">
              The component stack to add.
            </param>
            <param name="replace">
              If an already existing component should be replaced.
            </param>
            <returns>
              True if stack is not null and all componenta were added successfully, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.Insert(System.Int32,MiCore.MiComponent,System.Boolean)">
            <summary>
              Inserts a component at the given index in the stack.
            </summary>
            <param name="index">
              The index to insert the component. <see cref="M:MiCore.ComponentStack.Add(MiCore.MiComponent,System.Boolean)"/> will be called
              instead if equals to <see cref="P:MiCore.ComponentStack.Count"/>.
            </param>
            <param name="comp">
              The component to add.
            </param>
            <param name="replace">
              Should an alreadu existing component of the same type be replaced?
            </param>
            <returns>
              True if the component was inserted successfully, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.Insert``1(System.Int32,``0,System.Boolean)">
            <summary>
              Inserts a component at the given index in the stack.
            </summary>
            <typeparam name="T">
              The component type to add.
            </typeparam>
            <param name="index">
              The index to insert the component.
            </param>
            <param name="comp">
              The component to add.
            </param>
            <param name="replace">
              Should an already existing component of the same type be replaced?
            </param>
            <returns>
              True if the component was added successfully, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.InsertNew``1(System.Int32,System.Boolean)">
            <summary>
              Inserts a component at the given index in the stack.
            </summary>
            <typeparam name="T">
              The component type to add.
            </typeparam>
            <param name="index">
              The index to insert the component.
            </param>
            <param name="replace">
              Should an already existing component of the same type be replaced?
            </param>
            <returns>
              True if the component was added successfully, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{MiCore.MiComponent},System.Boolean)">
            <summary>
              Inserts a range of components to the stack at the given index.
            </summary>
            <param name="index">
              The index to insert the components.
            </param>
            <param name="comps">
              The component range to add.
            </param>
            <param name="replace">
              If an already existing component should be replaced.
            </param>
            <returns>
              True if comps is not null and all componenta were added successfully, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.InsertRange(System.Int32,MiCore.ComponentStack,System.Boolean)">
            <summary>
              Inserts a range of components from another stack at the given index.
            </summary>
            <param name="index">
              The index to insert the components.
            </param>
            <param name="stack">
              The component stack to add.
            </param>
            <param name="replace">
              If an already existing component should be replaced.
            </param>
            <returns>
              True if stack is not null and all componenta were added successfully, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.Remove``1">
            <summary>
              Removes the component with the given type.
            </summary>
            <typeparam name="T">
              The component type.
            </typeparam>
            <returns>
              True if there was a component with the given type and it was removed,
              otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.Remove(System.Int32)">
            <summary>
              Removes the component at the given index.
            </summary>
            <param name="index">
              The component index.
            </param>
            <returns>
              True if index was in range and the component was removed, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.Remove(System.String)">
            <summary>
              Removes the component with the given type name.
            </summary>
            <param name="typename">
              The component type name.
            </param>
            <returns>
              True if the component existed and was removed successfully.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.Release``1">
            <summary>
              Releases the component with the given type without disposing it.
            </summary>
            <typeparam name="T">
              The component type.
            </typeparam>
            <returns>
              The released component or null if nothing was removed.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.Release(System.Int32)">
            <summary>
              Releases the component at the given index.
            </summary>
            <param name="index">
              The component index.
            </param>
            <returns>
              The released component or null if index is out of range.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.Release(System.String)">
            <summary>
              Removes the component with the given type name.
            </summary>
            <param name="typename">
              The component type name.
            </param>
            <returns>
              True if the component existed and was removed successfully.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.Clear">
            <summary>
              Clears all components from the stack.
            </summary>
        </member>
        <member name="M:MiCore.ComponentStack.OnUpdate(System.Single)">
            <summary>
              Updates the stack and components.
            </summary>
            <param name="dt">
              Delta time.
            </param>
        </member>
        <member name="M:MiCore.ComponentStack.OnDraw(SFML.Graphics.RenderTarget,SFML.Graphics.RenderStates)">
            <summary>
              Draws the stack and components.
            </summary>
            <param name="target">
              The render target.
            </param>
            <param name="states">
              Render states.
            </param>
        </member>
        <member name="M:MiCore.ComponentStack.OnDispose">
            <summary>
              Disposes of the object.
            </summary>
        </member>
        <member name="M:MiCore.ComponentStack.LoadFromStream(System.IO.BinaryReader)">
            <summary>
              Attempts to deserialize the object from the stream.
            </summary>
            <param name="sr">
              Stream reader.
            </param>
            <returns>
              True if deserialization succeeded and false otherwise.
            </returns>  
        </member>
        <member name="M:MiCore.ComponentStack.SaveToStream(System.IO.BinaryWriter)">
            <summary>
              Attempts to serialize the object to the stream.
            </summary>
            <param name="sw">
              Stream writer.
            </param>
            <returns>
              True if serialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.LoadFromXml(System.Xml.XmlElement)">
            <summary>
              Attempts to load the object from the xml element.
            </summary>
            <param name="element">
              The xml element.
            </param>
            <returns>
              True if the object loaded successfully or false on failure.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.ToString">
            <summary>
              Gets the object xml string.
            </summary>
            <returns>
              The xml string of the object.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.Clone">
            <summary>
              Returns a copy of this object.
            </summary>
            <returns>
              A copy of this object.
            </returns>
        </member>
        <member name="M:MiCore.ComponentStack.GetEnumerator">
            <summary>
              Gets an enumerator that can be used to iterate through the components.
            </summary>
            <returns>
              An enumerator that can be used to iterate through the component collection.
            </returns>
        </member>
        <member name="T:MiCore.IDatabase`3">
            <summary>
              Interface for databases.
            </summary>
            <typeparam name="T">
              Data type.
            </typeparam>
            <typeparam name="ReadT">
              The type used to deserialize from a stream.
            </typeparam>
            <typeparam name="WriteT">
              The type used to serialize to a stream.
            </typeparam>
        </member>
        <member name="P:MiCore.IDatabase`3.FilePath">
            <summary>
              File path used for serialization.
            </summary>
        </member>
        <member name="P:MiCore.IDatabase`3.Item(System.String)">
            <summary>
              Element accessor.
            </summary>
            <param name="key">
              The key of the element to access.
            </param>
        </member>
        <member name="P:MiCore.IDatabase`3.Empty">
            <summary>
              If the database is empty.
            </summary>
        </member>
        <member name="P:MiCore.IDatabase`3.Count">
            <summary>
              The amount of elements the database contains.
            </summary>
        </member>
        <member name="P:MiCore.IDatabase`3.Keys">
            <summary>
              List of element keys.
            </summary>
        </member>
        <member name="M:MiCore.IDatabase`3.Contains(System.String)">
            <summary>
              If the database contains an element with the given key.
            </summary>
            <param name="key">
              The element key.
            </param>
            <returns>
              True if the database contains an element with the given key and
              false otherwise.
            </returns>
        </member>
        <member name="M:MiCore.IDatabase`3.Get(System.String)">
            <summary>
              Gets the element with the given key.
            </summary>
            <param name="key">
              The element key.
            </param>
            <returns>
              The element with the given key or null if one does not exist.
            </returns>
        </member>
        <member name="M:MiCore.IDatabase`3.Set(System.String,`0)">
            <summary>
              Replaces the element with the given key.
            </summary>
            <param name="key">
              The element key.
            </param>
            <param name="val">
              The new element.
            </param>
            <returns>
              True if the database contains an element with the given key and 
              it was successfully replaced, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.IDatabase`3.Add(System.String,`0,System.Boolean)">
            <summary>
              Adds an element to the database, optionally replacing an existing
              element with the same key.
            </summary>
            <param name="key">
              The element key.
            </param>
            <param name="val">
              The element to add.
            </param>
            <param name="replace">
              If an element already exists in the database with the given key,
              should it be replaced?
            </param>
            <returns>
              True if the element was successfully added to the database,
              otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.IDatabase`3.Remove(System.String)">
            <summary>
              Removes the element with the given key from the database.
            </summary>
            <param name="key">
              The element key.
            </param>
            <returns>
              True if an element existed in the database with the given key and
              it was removed successfully, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.IDatabase`3.Clear">
            <summary>
              Removes all elements from the database.
            </summary>
        </member>
        <member name="M:MiCore.IDatabase`3.LoadFromFile">
            <summary>
              Loads the database from <see cref="P:MiCore.IDatabase`3.FilePath"/>.
            </summary>
            <returns>
              True if the database was loaded successfully from file and false
              otherwise.
            </returns>
        </member>
        <member name="M:MiCore.IDatabase`3.SaveToFile(System.Boolean)">
            <summary>
              Saves the database to <see cref="P:MiCore.IDatabase`3.FilePath"/>.
            </summary>
            <param name="overwrite">
              If an already existing file should be overwritten.
            </param>
            <returns>
              True if the database was saves successfully to file and false
              otherwise.
            </returns>
        </member>
        <member name="T:MiCore.IDisposableDatabase`3">
            <summary>
              Interface for disposable databases.
            </summary>
            <typeparam name="T">
              Disposable data type.
            </typeparam>
            <typeparam name="ReadT">
              The type used to deserialize from a stream.
            </typeparam>
            <typeparam name="WriteT">
              The type used to serialize to a stream.
            </typeparam>
        </member>
        <member name="T:MiCore.ITextDatabase`1">
            <summary>
              Database for text serializable types.
            </summary>
            <typeparam name="T">
              Data type.
            </typeparam>
        </member>
        <member name="T:MiCore.IDisposableTextDatabase`1">
            <summary>
              Database for disposable text serializable types.
            </summary>
            <typeparam name="T">
              Disposable data type.
            </typeparam>
        </member>
        <member name="T:MiCore.IBinaryDatabase`1">
            <summary>
              Database for binary serializable types.
            </summary>
            <typeparam name="T">
              Data type.
            </typeparam>
        </member>
        <member name="T:MiCore.IDisposableBinaryDatabase`1">
            <summary>
              Database for disposable binary serializable types.
            </summary>
            <typeparam name="T">
              Disposable data type.
            </typeparam>
        </member>
        <member name="T:MiCore.Database`3">
            <summary>
              Base class for databases.
            </summary>
            <typeparam name="T">
              Data type.
            </typeparam>
            <typeparam name="ReadT">
              The type used to deserialize from a stream.
            </typeparam>
            <typeparam name="WriteT">
              The type used to serialize to a stream.
            </typeparam>
        </member>
        <member name="M:MiCore.Database`3.#ctor">
            <summary>
              Constructor
            </summary>
        </member>
        <member name="M:MiCore.Database`3.#ctor(MiCore.Database{`0,`1,`2})">
            <summary>
              Copy constructor.
            </summary>
            <param name="sd">
              The database to copy from.
            </param>
        </member>
        <member name="P:MiCore.Database`3.FilePath">
            <summary>
              File path used for serialization.
            </summary>
        </member>
        <member name="P:MiCore.Database`3.Item(System.String)">
            <summary>
              Element accessor.
            </summary>
            <param name="key">
              The key of the element to access.
            </param>
        </member>
        <member name="P:MiCore.Database`3.Empty">
            <summary>
              If the database is empty.
            </summary>
        </member>
        <member name="P:MiCore.Database`3.Count">
            <summary>
              The amount of elements the database contains.
            </summary>
        </member>
        <member name="P:MiCore.Database`3.Keys">
            <summary>
              List of element keys.
            </summary>
        </member>
        <member name="M:MiCore.Database`3.Contains(System.String)">
            <summary>
              If the database contains an element with the given key.
            </summary>
            <param name="key">
              The element key.
            </param>
            <returns>
              True if the database contains an element with the given key and
              false otherwise.
            </returns>
        </member>
        <member name="M:MiCore.Database`3.Get(System.String)">
            <summary>
              Gets the element with the given key.
            </summary>
            <param name="key">
              The element key.
            </param>
            <returns>
              The element with the given key or null if one does not exist.
            </returns>
        </member>
        <member name="M:MiCore.Database`3.Set(System.String,`0)">
            <summary>
              Replaces the element with the given key.
            </summary>
            <param name="key">
              The element key.
            </param>
            <param name="val">
              The new element.
            </param>
            <returns>
              True if the database contains an element with the given key and 
              it was successfully replaced, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.Database`3.Add(System.String,`0,System.Boolean)">
            <summary>
              Adds an element to the database, optionally replacing an existing
              element with the same key.
            </summary>
            <param name="key">
              The element key.
            </param>
            <param name="val">
              The element to add.
            </param>
            <param name="replace">
              If an element already exists in the database with the given key,
              should it be replaced?
            </param>
            <returns>
              True if the element was successfully added to the database,
              otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.Database`3.Remove(System.String)">
            <summary>
              Removes the element with the given key from the database.
            </summary>
            <param name="key">
              The element key.
            </param>
            <returns>
              True if an element existed in the database with the given key and
              it was removed successfully, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.Database`3.Clear">
            <summary>
              Removes all elements from the database.
            </summary>
        </member>
        <member name="M:MiCore.Database`3.LoadFromStream(`1)">
            <summary>
              Attempts to deserialize the object from the stream.
            </summary>
            <param name="sr">
              Stream reader.
            </param>
            <returns>
              True if deserialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiCore.Database`3.SaveToStream(`2)">
            <summary>
              Attempts to serialize the object to the stream.
            </summary>
            <param name="sw">
              Stream writer.
            </param>
            <returns>
              True if serialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiCore.Database`3.LoadFromFile">
            <summary>
              Loads the database from <see cref="P:MiCore.Database`3.FilePath"/>.
            </summary>
            <returns>
              True if the database was loaded successfully from file and false
              otherwise.
            </returns>
        </member>
        <member name="M:MiCore.Database`3.SaveToFile(System.Boolean)">
            <summary>
              Saves the database to <see cref="P:MiCore.Database`3.FilePath"/>.
            </summary>
            <param name="overwrite">
              If an already existing file should be overwritten.
            </param>
            <returns>
              True if the database was saves successfully to file and false
              otherwise.
            </returns>
        </member>
        <member name="M:MiCore.Database`3.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
              An enumerator that iterates through the collection.
            </returns>
        </member>
        <member name="M:MiCore.Database`3.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
              An enumerator that iterates through the collection.
            </returns>
        </member>
        <member name="F:MiCore.Database`3.m_db">
            <summary>
              Collection of database elements indexed by their string key.
            </summary>
        </member>
        <member name="T:MiCore.DisposableDatabase`3">
            <summary>
              Base class for disposable databases.
            </summary>
            <typeparam name="T">
              Disposable data type.
            </typeparam>
            <typeparam name="ReadT">
              The type used to deserialize from a stream.
            </typeparam>
            <typeparam name="WriteT">
              The type used to serialize to a stream.
            </typeparam>
        </member>
        <member name="M:MiCore.DisposableDatabase`3.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiCore.DisposableDatabase`3.#ctor(MiCore.DisposableDatabase{`0,`1,`2})">
            <summary>
              Copy constructor.
            </summary>
            <param name="dd">
              The database to copy from.
            </param>
        </member>
        <member name="M:MiCore.DisposableDatabase`3.Remove(System.String)">
            <summary>
              Disposes and removes the element with the given key from the
              database.
            </summary>
            <param name="key">
              The element key.
            </param>
            <returns>
              True if an element existed in the database with the given key and
              it was removed successfully, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.DisposableDatabase`3.Clear">
            <summary>
              Removes all elements from the database.
            </summary>
        </member>
        <member name="M:MiCore.DisposableDatabase`3.Dispose">
            <summary>
              Performs application-defined tasks associated with freeing, 
              releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MiCore.TextDatabase`1">
            <summary>
              Base class for databases that contain text serializable objects.
            </summary>
            <typeparam name="T">
              The text serializable type the database will contain.
            </typeparam>
        </member>
        <member name="M:MiCore.TextDatabase`1.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiCore.TextDatabase`1.#ctor(MiCore.TextDatabase{`0})">
            <summary>
              Copy constructor.
            </summary>
            <param name="sd">
              The database to copy from.
            </param>
        </member>
        <member name="M:MiCore.TextDatabase`1.LoadFromStream(System.IO.StreamReader)">
            <summary>
              Attempts to deserialize the object from the stream.
            </summary>
            <param name="sr">
              Stream reader.
            </param>
            <returns>
              True if deserialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiCore.TextDatabase`1.SaveToStream(System.IO.StreamWriter)">
            <summary>
              Attempts to serialize the object to the stream.
            </summary>
            <param name="sw">
              Stream writer.
            </param>
            <returns>
              True if serialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiCore.TextDatabase`1.LoadFromFile">
            <summary>
              Loads the database from the file path.
            </summary>
            <returns>
              True if the database was loaded successfully from file and false
              otherwise.
            </returns>
        </member>
        <member name="M:MiCore.TextDatabase`1.SaveToFile(System.Boolean)">
            <summary>
              Saves the database to the file path.
            </summary>
            <param name="overwrite">
              If an already existing file should be overwritten.
            </param>
            <returns>
              True if the database was saves successfully to file and false
              otherwise.
            </returns>
        </member>
        <member name="T:MiCore.DisposableTextDatabase`1">
            <summary>
              Base class for databases that contain disposable, text serializable objects.
            </summary>
            <typeparam name="T">
              The disposable, text serializable type the database will contain.
            </typeparam>
        </member>
        <member name="M:MiCore.DisposableTextDatabase`1.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiCore.DisposableTextDatabase`1.#ctor(MiCore.DisposableTextDatabase{`0})">
            <summary>
              Copy constructor.
            </summary>
            <param name="dtd">
              The database to copy from.
            </param>
        </member>
        <member name="M:MiCore.DisposableTextDatabase`1.Remove(System.String)">
            <summary>
              Disposes and removes the element with the given key from the
              database.
            </summary>
            <param name="key">
              The element key.
            </param>
            <returns>
              True if an element existed in the database with the given key and
              it was removed successfully, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.DisposableTextDatabase`1.Clear">
            <summary>
              Removes all elements from the database.
            </summary>
        </member>
        <member name="M:MiCore.DisposableTextDatabase`1.Dispose">
            <summary>
              Performs application-defined tasks associated with freeing, 
              releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MiCore.BinaryDatabase`1">
            <summary>
              Base class for databases that contain binary serializable objects.
            </summary>
            <typeparam name="T">
              The binary serializable type the database will contain.
            </typeparam>
        </member>
        <member name="M:MiCore.BinaryDatabase`1.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiCore.BinaryDatabase`1.#ctor(MiCore.BinaryDatabase{`0})">
            <summary>
              Copy constructor.
            </summary>
            <param name="sd">
              The database to copy from.
            </param>
        </member>
        <member name="M:MiCore.BinaryDatabase`1.LoadFromStream(System.IO.BinaryReader)">
            <summary>
              Attempts to deserialize the object from the stream.
            </summary>
            <param name="sr">
              Stream reader.
            </param>
            <returns>
              True if deserialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiCore.BinaryDatabase`1.SaveToStream(System.IO.BinaryWriter)">
            <summary>
              Attempts to serialize the object to the stream.
            </summary>
            <param name="sw">
              Stream writer.
            </param>
            <returns>
              True if serialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiCore.BinaryDatabase`1.LoadFromFile">
            <summary>
              Loads the database from the file path.
            </summary>
            <returns>
              True if the database was loaded successfully from file and false
              otherwise.
            </returns>
        </member>
        <member name="M:MiCore.BinaryDatabase`1.SaveToFile(System.Boolean)">
            <summary>
              Saves the database to the file path.
            </summary>
            <param name="overwrite">
              If an already existing file should be overwritten.
            </param>
            <returns>
              True if the database was saves successfully to file and false
              otherwise.
            </returns>
        </member>
        <member name="T:MiCore.DisposableBinaryDatabase`1">
            <summary>
              Base class for databases that contain disposable, binary serializable objects.
            </summary>
            <typeparam name="T">
              The disposable, binary serializable type the database will contain.
            </typeparam>
        </member>
        <member name="M:MiCore.DisposableBinaryDatabase`1.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiCore.DisposableBinaryDatabase`1.#ctor(MiCore.DisposableBinaryDatabase{`0})">
            <summary>
              Copy constructor.
            </summary>
            <param name="dbd">
              The database to copy from.
            </param>
        </member>
        <member name="M:MiCore.DisposableBinaryDatabase`1.Remove(System.String)">
            <summary>
              Disposes and removes the element with the given key from the
              database.
            </summary>
            <param name="key">
              The element key.
            </param>
            <returns>
              True if an element existed in the database with the given key and
              it was removed successfully, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.DisposableBinaryDatabase`1.Clear">
            <summary>
              Removes all elements from the database.
            </summary>
        </member>
        <member name="M:MiCore.DisposableBinaryDatabase`1.Dispose">
            <summary>
              Performs application-defined tasks associated with freeing, 
              releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MiCore.DatabaseManager">
            <summary>
              Singleton class that manages binary databases.
            </summary>
        </member>
        <member name="P:MiCore.DatabaseManager.Empty">
            <summary>
              If the manager contains no databases.
            </summary>
        </member>
        <member name="P:MiCore.DatabaseManager.Count">
            <summary>
              The amount of databases in the manager.
            </summary>
        </member>
        <member name="M:MiCore.DatabaseManager.Contains(System.Type)">
            <summary>
              If the manager contains a database of the given type.
            </summary>
            <param name="t">
              The database type to check.
            </param>
            <returns>
              True if the manager contains a database of the given type,
              otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.DatabaseManager.Get``2">
            <summary>
              Attempts to get the database of type T. Loading it from file or
              creating a new one if needed.
            </summary>
            <typeparam name="T">
              The binary database type.
            </typeparam>
            <typeparam name="D">
              Data type managed by T.
            </typeparam>
            <returns>
              The database of the given type if it exists or can be loaded,
              otherwise null.
            </returns>
        </member>
        <member name="M:MiCore.DatabaseManager.Load``2(System.Boolean)">
            <summary>
              Attempts to load the database of type T from file.
            </summary>
            <typeparam name="T">
              The binary database type.
            </typeparam>
            <typeparam name="D">
              Data type managed by T
            </typeparam>
            <param name="reload">
              If an already loaded database should be loaded again.
            </param>
            <returns>
              True if the database was loaded successfully or loaded already,
              otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.DatabaseManager.Save``2(System.Boolean)">
            <summary>
              Attempts to save the database of type T to file.
            </summary>
            <typeparam name="T">
              The binary database type.
            </typeparam>
            <typeparam name="D">
              Data type managed by T
            </typeparam>
            <param name="overwrite">
              If an already existing file should be overwritten.
            </param>
            <returns>
              True if the database was already loaded and was saved successfully
              to file, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.DatabaseManager.Create``2(System.Boolean)">
            <summary>
              Attempts to create a new database of type T.
            </summary>
            <typeparam name="T">
              The binary database type.
            </typeparam>
            <typeparam name="D">
              Data type managed by T
            </typeparam>
            <param name="delete">
              If an already existing database should be deleted.
            </param>
            <returns>
              True if the database was created successfully, otherwise false.
            </returns>
        </member>
        <member name="P:MiCore.DatabaseManager.Instance">
            <summary>
              The singleton instance.
            </summary>
        </member>
        <member name="T:MiCore.MiEntity">
            <summary>
              Base class for all game objects.
            </summary>
        </member>
        <member name="M:MiCore.MiEntity.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiCore.MiEntity.#ctor(MiCore.MiEntity)">
            <summary>
              Copy constructor.
            </summary>
            <param name="ent">
              Entity to copy.
            </param>
            <exception cref="T:System.ArgumentNullException">
              Inherited from <see cref="M:MiCore.MiObject.#ctor(MiCore.MiObject)"/>.
            </exception>
        </member>
        <member name="M:MiCore.MiEntity.#ctor(SFML.Graphics.RenderWindow)">
            <summary>
              Constructor setting the target render window.
            </summary>
            <param name="window">
              The target window.
            </param>
        </member>
        <member name="M:MiCore.MiEntity.#ctor(System.String,SFML.Graphics.RenderWindow)">
            <summary>
              Constructor setting the object ID and optionally the target render window.
            </summary>
            <param name="id">
              The object ID.
            </param>
            <param name="window">
              The target window.
            </param>
        </member>
        <member name="M:MiCore.MiEntity.#ctor(System.String,System.String,SFML.Graphics.RenderWindow)">
            <summary>
              Constructor setting the object ID, name and optionally the target render window.
            </summary>
            <param name="id">
              The object ID.
            </param>
            <param name="name">
              The object name.
            </param>
            <param name="window">
              The target window.
            </param>
        </member>
        <member name="P:MiCore.MiEntity.Components">
            <summary>
              Entity component stack.
            </summary>
        </member>
        <member name="P:MiCore.MiEntity.Window">
            <summary>
              A reference to the target render window.
            </summary>
        </member>
        <member name="M:MiCore.MiEntity.TextEntered(SFML.Window.TextEventArgs)">
            <summary>
              To be called on TextEntered event. Calls <see cref="M:MiCore.MiComponent.OnTextEntered(SFML.Window.TextEventArgs)"/>
              for all enabled components for this entity and all child entities.
            </summary>
            <param name="e">
              The event args.
            </param>
        </member>
        <member name="M:MiCore.MiEntity.OnUpdate(System.Single)">
            <summary>
              Updates the component stack and children.
            </summary>
            <param name="dt">
              Delta time.
            </param>
        </member>
        <member name="M:MiCore.MiEntity.OnDraw(SFML.Graphics.RenderTarget,SFML.Graphics.RenderStates)">
            <summary>
              Draws the component stack and children.
            </summary>
            <param name="target">
              The render target.
            </param>
            <param name="states">
              Render states.
            </param>
        </member>
        <member name="M:MiCore.MiEntity.OnDispose">
            <summary>
              Disposes of the object and children.
            </summary>
        </member>
        <member name="M:MiCore.MiEntity.LoadFromStream(System.IO.BinaryReader)">
            <summary>
              Attempts to deserialize the object from the stream.
            </summary>
            <param name="sr">
              Stream reader.
            </param>
            <returns>
              True if deserialization succeeded and false otherwise.
            </returns>  
        </member>
        <member name="M:MiCore.MiEntity.SaveToStream(System.IO.BinaryWriter)">
            <summary>
              Attempts to serialize the object to the stream.
            </summary>
            <param name="sw">
              Stream writer.
            </param>
            <returns>
              True if serialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiCore.MiEntity.LoadFromXml(System.Xml.XmlElement)">
            <summary>
              Attempts to load the object from the xml element.
            </summary>
            <param name="element">
              The xml element.
            </param>
            <returns>
              True if the object loaded successfully or false on failure.
            </returns>
        </member>
        <member name="M:MiCore.MiEntity.Equals(MiCore.MiEntity)">
            <summary>
              Checks if this object is equal to another.
            </summary>
            <param name="other">
              The object to check against.
            </param>
            <returns>
              True if the given object is concidered equal to this object, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.MiEntity.ToString">
            <summary>
              Gets the object xml string.
            </summary>
            <returns>
              The xml string of the object.
            </returns>
        </member>
        <member name="M:MiCore.MiEntity.Clone">
            <summary>
              Returns a copy of this object.
            </summary>
            <returns>
              A copy of this object.
            </returns>
        </member>
        <member name="T:MiCore.IIdentifiable`1">
            <summary>
              Interface for objects that are identified by an ID.
            </summary>
        </member>
        <member name="P:MiCore.IIdentifiable`1.ID">
            <summary>
              The object ID.
            </summary>
        </member>
        <member name="T:MiCore.Identifiable">
            <summary>
              Contains ID and name related functionality.
            </summary>
        </member>
        <member name="M:MiCore.Identifiable.IsValid(System.String)">
            <summary>
              If the given ID is valid.
            </summary>
            <param name="id">
              The ID to check.
            </param>
            <returns>
              True if the ID is valid and false otherwise.
            </returns>
        </member>
        <member name="M:MiCore.Identifiable.IsValid(MiCore.IIdentifiable{System.String})">
            <summary>
              If the given objects' ID is valid.
            </summary>
            <param name="i">
              The object to check.
            </param>
            <returns>
              True if the objects' ID is valid and false otherwise.
            </returns>
        </member>
        <member name="M:MiCore.Identifiable.AsValid(System.String)">
            <summary>
              Returns either the given string as a valid ID or a generated random ID if it is empty or null.
            </summary>
            <param name="id">
              The invalid ID.
            </param>
            <returns>
              The given string as a valid ID.
            </returns>
        </member>
        <member name="M:MiCore.Identifiable.AsValid(MiCore.IIdentifiable{System.String})">
            <summary>
              Returns the given objects' ID as a valid ID.
            </summary>
            <param name="i">
              The object.
            </param>
            <returns>
              The given object' invalid ID as a valid ID.
            </returns>
        </member>
        <member name="M:MiCore.Identifiable.NewStringID(System.String)">
            <summary>
              Creates a psuedo-new, valid ID from a given prefix.
            </summary>
            <param name="prefix">
              Prefixes the ID numbers.
            </param>
            <returns>
              A new ID.
            </returns>
        </member>
        <member name="M:MiCore.Identifiable.NewUIntID(System.String)">
            <summary>
              Creates a psuedo-new ulong ID.
            </summary>
            <param name="prefix">
              The prefix linked to the ID type.
            </param>
            <returns>
              A new ID.
            </returns>
        </member>
        <member name="M:MiCore.Identifiable.RandomStringID(System.UInt32)">
            <summary>
              Generates a random ID string with the given length.
            </summary>
            <param name="length">
              The length of the ID.
            </param>
            <returns>
              A random ID with the given length or `string.Empty` if length is zero.
            </returns>
        </member>
        <member name="T:MiCore.JobManager">
            <summary>
              Priority based job manager.
            </summary>
        </member>
        <member name="F:MiCore.JobManager.MaxPriority">
            <summary>
              Maximum job priority.
            </summary>
        </member>
        <member name="M:MiCore.JobManager.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiCore.JobManager.#ctor(MiCore.JobManager)">
            <summary>
              Copy constructor.
            </summary>
            <param name="sys">
              Object to copy.
            </param>
        </member>
        <member name="P:MiCore.JobManager.Empty">
            <summary>
              If the job system contains no jobs.
            </summary>
        </member>
        <member name="P:MiCore.JobManager.Count">
            <summary>
              The amount of registered job priorities.
            </summary>
        </member>
        <member name="M:MiCore.JobManager.HasJob(System.UInt32)">
            <summary>
              If a job is registered to the priority.
            </summary>
            <param name="priority">
              The job priority.
            </param>
            <returns>
              True if the system contains a job with the given priority, otherwise null.
            </returns>
        </member>
        <member name="M:MiCore.JobManager.JobCount(System.UInt32)">
            <summary>
              Gets the amount of jobs registered to the given priority.
            </summary>
            <param name="priority">
              Job priority.
            </param>
            <returns>
              The amount of jobs registered to the priority.
            </returns>
        </member>
        <member name="M:MiCore.JobManager.Get(System.UInt32)">
            <summary>
              Gets the jobs registered to the given priority.
            </summary>
            <param name="priority">
              Job priority.
            </param>
            <returns>
              The jobs registered to the given priority.
            </returns>
        </member>
        <member name="M:MiCore.JobManager.GetUpTo(System.UInt32,System.Boolean)">
            <summary>
              Gets all jobs up to and optionally including the given priority.
            </summary>
            <param name="priority">
              Job priority.
            </param>
            <param name="inclusive">
              Include priority too?
            </param>
            <returns>
              All jobs up to (and including if <paramref name="inclusive"/> is true) the given
              priority.
            </returns>
        </member>
        <member name="M:MiCore.JobManager.GetFrom(System.UInt32,System.Boolean)">
            <summary>
              Gets all jobs after and optionally including the given priority.
            </summary>
            <param name="priority">
              The priority to start from.
            </param>
            <param name="inclusive">
              Include priority too?
            </param>
            <returns>
              All jobs from (and including if <paramref name="inclusive"/> is true) the given
              priority.
            </returns>
        </member>
        <member name="M:MiCore.JobManager.GetAll">
            <summary>
              Gets all jobs in priority order.
            </summary>
            <returns>
              All jobs in priority order.
            </returns>
        </member>
        <member name="M:MiCore.JobManager.Run(MiCore.MiEntity,System.UInt32)">
            <summary>
              Runs all jobs of a given priority on the entity and its children.
            </summary>
            <param name="e">
              The entity to run the job on.
            </param>
            <param name="priority">
              The job priority.
            </param>
        </member>
        <member name="M:MiCore.JobManager.RunUpTo(MiCore.MiEntity,System.UInt32,System.Boolean)">
            <summary>
              Runs all jobs up to a given priority on the entity and its children.
            </summary>
            <param name="e">
              The entity to run the job on.
            </param>
            <param name="priority">
              The job priority.
            </param>
            <param name="inclusive">
              Include priority too?
            </param>
        </member>
        <member name="M:MiCore.JobManager.RunFrom(MiCore.MiEntity,System.UInt32,System.Boolean)">
            <summary>
              Runs all jobs from a given priority on the entity and its children.
            </summary>
            <param name="e">
              The entity to run the job on.
            </param>
            <param name="priority">
              The job priority.
            </param>
            <param name="inclusive">
              Include priority too?
            </param>
        </member>
        <member name="M:MiCore.JobManager.RunAll(MiCore.MiEntity)">
            <summary>
              Runs all jobs on the entity and its children.
            </summary>
            <param name="e">
              The entity to run the job on.
            </param>
        </member>
        <member name="M:MiCore.JobManager.RunASync(MiCore.MiEntity,System.UInt32)">
            <summary>
              Asyncronously runs all jobs of a given priority on the entity and its children.
            </summary>
            <param name="e">
              The entity to run the job on.
            </param>
            <param name="priority">
              The job priority.
            </param>
        </member>
        <member name="M:MiCore.JobManager.RunUpToASync(MiCore.MiEntity,System.UInt32,System.Boolean)">
            <summary>
              Asyncronously runs all jobs up to a given priority on the entity and its children.
            </summary>
            <param name="e">
              The entity to run the job on.
            </param>
            <param name="priority">
              The job priority.
            </param>
            <param name="inclusive">
              Include priority too?
            </param>
        </member>
        <member name="M:MiCore.JobManager.RunFromASync(MiCore.MiEntity,System.UInt32,System.Boolean)">
            <summary>
              Asyncronously runs all jobs from a given priority on the entity and its children.
            </summary>
            <param name="e">
              The entity to run the job on.
            </param>
            <param name="priority">
              The job priority.
            </param>
            <param name="inclusive">
              Include priority too?
            </param>
        </member>
        <member name="M:MiCore.JobManager.RunAllASync(MiCore.MiEntity)">
            <summary>
              Asyncronously runs all jobs on the entity and its children.
            </summary>
            <param name="e">
              The entity to run the job on.
            </param>
        </member>
        <member name="M:MiCore.JobManager.Add(System.UInt32,MiCore.JobList)">
            <summary>
              Registers the given jobs to the given priority. 
            </summary>
            <param name="priority">
              Job priority.
            </param>
            <param name="jobs">
              The jobs to add.
            </param>
            <returns>
              True if priority is within range, jobs is not null, and all jobs were registered
              successfully, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.JobManager.Remove(System.UInt32)">
            <summary>
              Removes all jobs registered to the given priority.
            </summary>
            <param name="priority">
              Job priority.
            </param>
            <returns>
              True if a job was registered to priority and was removed successfully.
            </returns>
        </member>
        <member name="M:MiCore.JobManager.RemoveUpTo(System.UInt32,System.Boolean)">
            <summary>
              Removes all jobs registered up until the given priority.
            </summary>
            <param name="priority">
              Job priority.
            </param>
            <param name="inclusive">
              Include priority too?
            </param>
        </member>
        <member name="M:MiCore.JobManager.RemoveFrom(System.UInt32,System.Boolean)">
            <summary>
              Removes all jobs registered after the given priority.
            </summary>
            <param name="priority">
              Job priority.
            </param>
            <param name="inclusive">
              Include priority too?
            </param>
        </member>
        <member name="M:MiCore.JobManager.Remove(System.UInt32,MiCore.JobDelegate[])">
            <summary>
              Removes and unregisters the given jobs from the given priority.
            </summary>
            <param name="priority">
              Job priority.
            </param>
            <param name="jobs">
              Jobs to remove.
            </param>
        </member>
        <member name="M:MiCore.JobManager.RemoveAll">
            <summary>
              Removes all jobs from all priorities.
            </summary>
        </member>
        <member name="M:MiCore.JobManager.GetEnumerator">
            <summary>
              Gets an enumerator that can be used to iterate through the collection.
            </summary>
            <returns>
              An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:MiCore.JobDelegate">
            <summary>
              An job delegate.
            </summary>
            <param name="e">
              Entity to run the job on.
            </param>
        </member>
        <member name="T:MiCore.MiJob">
            <summary>
              An asynchronous job.
            </summary>
        </member>
        <member name="M:MiCore.MiJob.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiCore.MiJob.#ctor(MiCore.MiJob)">
            <summary>
              Copy constructor.
            </summary>
            <exception cref="T:System.ArgumentNullException">
              If job is null.
            </exception>
        </member>
        <member name="M:MiCore.MiJob.#ctor(MiCore.JobDelegate)">
            <summary>
              Constructor setting the job delegate.
            </summary>
            <exception cref="T:System.ArgumentNullException">
              If job is null.
            </exception>
        </member>
        <member name="E:MiCore.MiJob.Job">
            <summary>
              Job event.
            </summary>
        </member>
        <member name="P:MiCore.MiJob.RequiredComponents">
            <summary>
              Contains the types of components required by the job.
            </summary>
        </member>
        <member name="M:MiCore.MiJob.Requires(System.String)">
            <summary>
              Checks if the job requires a component with the given component name.
            </summary>
            <param name="typename">
              The name of the component to check.
            </param>
            <returns>
              True if the job requires on the given component type name.
            </returns>
        </member>
        <member name="M:MiCore.MiJob.Requires(System.Type)">
            <summary>
              Checks if the job requires a component of the given type.
            </summary>
            <param name="type">
              The component type.
            </param>
            <returns>
              True if the job requires on the given component type.
            </returns>
        </member>
        <member name="M:MiCore.MiJob.Requires``1">
            <summary>
              Checks if the job requires a component of the given type.
            </summary>
            <typeparam name="T">
              The component type.
            </typeparam>
            <returns>
              True if the job requires on the given component type.
            </returns>
        </member>
        <member name="M:MiCore.MiJob.ContainsRequired(MiCore.MiEntity)">
            <summary>
              Checks if the entity contains all necessary components needed for the job.
            </summary>
            <param name="e">
              The target entity.
            </param>
            <returns>
              True if the entity contains all necessary components needed for the job, otherwise
              false.
            </returns>
        </member>
        <member name="M:MiCore.MiJob.Add(MiCore.MiJob)">
            <summary>
              Adds another jobs' requirements and job delegates to this one.
            </summary>
            <param name="job">
              The job to add.
            </param>
        </member>
        <member name="M:MiCore.MiJob.Run(MiCore.MiEntity)">
            <summary>
              Runs the job on the entity and its children.
            </summary>
            <param name="e">
              The target entity.
            </param>
        </member>
        <member name="M:MiCore.MiJob.RunASync(MiCore.MiEntity)">
            <summary>
              Runs the job on the entity and its children asyncronously.
            </summary>
            <param name="e">
              The target entity.
            </param>
        </member>
        <member name="T:MiCore.LogType">
            <summary>
              Possible log message types.
            </summary>
        </member>
        <member name="F:MiCore.LogType.Error">
            <summary>
              For logging unrecoverable errors.
            </summary>
        </member>
        <member name="F:MiCore.LogType.Warning">
            <summary>
              For logging recoverable warnings.
            </summary>
        </member>
        <member name="F:MiCore.LogType.Debug">
            <summary>
              For logging debug information.
            </summary>
        </member>
        <member name="F:MiCore.LogType.Info">
            <summary>
              For logging standard messages.
            </summary>
        </member>
        <member name="T:MiCore.Logger">
            <summary>
              Handles logging functionality.
            </summary>
        </member>
        <member name="F:MiCore.Logger.DefaultLogPath">
            <summary>
              The default log file path.
            </summary>
        </member>
        <member name="P:MiCore.Logger.LogToConsole">
            <summary>
              If logs should be displayed in the console.
            </summary>
        </member>
        <member name="P:MiCore.Logger.LogToFile">
            <summary>
              If logs should be written to file.
            </summary>
        </member>
        <member name="P:MiCore.Logger.LogPath">
            <summary>
              File path to log file.
            </summary>
            <remarks>
              If this does not point to a valid file path and <see cref="P:MiCore.Logger.LogToFile"/> is true. It will be
              set to <see cref="F:MiCore.Logger.DefaultLogPath"/> on the next call to <see cref="M:MiCore.Logger.Log(System.String,MiCore.LogType)"/>.
            </remarks>
        </member>
        <member name="P:MiCore.Logger.LogFileExists">
            <summary>
              If a file exists at <see cref="P:MiCore.Logger.LogPath"/>.
            </summary>
        </member>
        <member name="M:MiCore.Logger.Log(System.String,MiCore.LogType)">
            <summary>
              Logs a message with the given log type.
            </summary>
            <param name="msg">
              The log message.
            </param>
            <param name="l">
              The log type.
            </param>
        </member>
        <member name="M:MiCore.Logger.LogReturn``1(System.String,``0,MiCore.LogType)">
            <summary>
              Logs a message to the log stream before returning a value.
            </summary>
            <typeparam name="T">
              The type of value to return.
            </typeparam>
            <param name="msg">
              The log message.
            </param>
            <param name="val">
              The value to return.
            </param>
            <param name="l">
              The log type.
            </param>
            <returns>
              Returns <paramref name="val"/>.
            </returns>
        </member>
        <member name="M:MiCore.Logger.DeleteLogFile">
            <summary>
              Deletes the log file.
            </summary>
        </member>
        <member name="T:MiCore.IMiObject">
            <summary>
              Base interface for ECS objects.
            </summary>
        </member>
        <member name="P:MiCore.IMiObject.Enabled">
            <summary>
              If the object is enabled and should be updated.
            </summary>
        </member>
        <member name="P:MiCore.IMiObject.Visible">
            <summary>
              If the object is visible and should be drawn.
            </summary>
        </member>
        <member name="P:MiCore.IMiObject.Disposed">
            <summary>
              If the object has been disposed.
            </summary>
        </member>
        <member name="M:MiCore.IMiObject.Update(System.Single)">
            <summary>
              Updates the object; called once per frame.
            </summary>
            <param name="dt">
              Delta time.
            </param>
        </member>
        <member name="T:MiCore.MiObject">
            <summary>
              Base class for all ECS objects.
            </summary>
        </member>
        <member name="M:MiCore.MiObject.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiCore.MiObject.#ctor(MiCore.MiObject)">
            <summary>
              Copy constructor.
            </summary>
            <param name="obj">
              The object to copy.
            </param>
            <exception cref="T:System.ArgumentNullException">
              If <paramref name="obj"/> is null
            </exception>
        </member>
        <member name="P:MiCore.MiObject.Disposed">
            <summary>
              If the object has been disposed.
            </summary>
        </member>
        <member name="P:MiCore.MiObject.Enabled">
            <summary>
              If the object is enabled and should be updated.
            </summary>
        </member>
        <member name="P:MiCore.MiObject.Visible">
            <summary>
              If the object is visible and should be drawn.
            </summary>
        </member>
        <member name="M:MiCore.MiObject.Update(System.Single)">
            <summary>
              Updates the object if enabled; called once per frame.
            </summary>
            <param name="dt">
              Delta time.
            </param>
        </member>
        <member name="M:MiCore.MiObject.Draw(SFML.Graphics.RenderTarget,SFML.Graphics.RenderStates)">
            <summary>
              Draws the object to the render target if visible; called once per frame.
            </summary>
            <param name="target">
              Render target.
            </param>
            <param name="states">
              Render states.
            </param>
        </member>
        <member name="M:MiCore.MiObject.OnUpdate(System.Single)">
            <summary>
              Called by <see cref="M:MiCore.MiObject.Update(System.Single)"/> if enabled. Override this with the object logic.
            </summary>
            <param name="dt">
              Delta time.
            </param>
        </member>
        <member name="M:MiCore.MiObject.OnDraw(SFML.Graphics.RenderTarget,SFML.Graphics.RenderStates)">
            <summary>
              Called by <see cref="M:MiCore.MiObject.Draw(SFML.Graphics.RenderTarget,SFML.Graphics.RenderStates)"/> if visible. Override this
              to draw your the object to the render target.
            </summary>
            <param name="target">
              Render target.
            </param>
            <param name="states">
              Render states.
            </param>
        </member>
        <member name="M:MiCore.MiObject.LoadFromStream(System.IO.BinaryReader)">
            <summary>
              Attempts to deserialize the object from the stream.
            </summary>
            <param name="sr">
              Stream reader.
            </param>
            <returns>
              True if deserialization succeeded and false otherwise.
            </returns>  
        </member>
        <member name="M:MiCore.MiObject.SaveToStream(System.IO.BinaryWriter)">
            <summary>
              Attempts to serialize the object to the stream.
            </summary>
            <param name="sw">
              Stream writer.
            </param>
            <returns>
              True if serialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiCore.MiObject.LoadFromXml(System.Xml.XmlElement)">
            <summary>
              Loads the object from xml.
            </summary>
            <param name="element">
              The xml element.
            </param>
            <returns>
              True on success or false on failure.
            </returns>
        </member>
        <member name="M:MiCore.MiObject.Dispose">
            <summary>
              Disposes of the object.
            </summary>
        </member>
        <member name="M:MiCore.MiObject.OnDispose">
            <summary>
              Called by Dispose; Override with your disposing and cleanup code if needed.
            </summary>
        </member>
        <member name="M:MiCore.MiObject.Clone">
            <summary>
              Returns a deep copy of the object.
            </summary>
            <returns>
              A deep copy of this object.
            </returns>
        </member>
        <member name="M:MiCore.MiObject.Equals(MiCore.MiObject)">
            <summary>
              Checks if this object is equal to another.
            </summary>
            <param name="other">
              The object to check against.
            </param>
            <returns>
              True if the given object is concidered equal to this object, otherwise false.
            </returns>
        </member>
        <member name="T:MiCore.INamable">
            <summary>
              Interface for objects that have a name.
            </summary>
        </member>
        <member name="P:MiCore.INamable.Name">
            <summary>
              The name of the object.
            </summary>
        </member>
        <member name="T:MiCore.Naming">
            <summary>
              Contains Name related functionality.
            </summary>
        </member>
        <member name="M:MiCore.Naming.IsValid(System.String)">
            <summary>
              If the given string is a valid name.
            </summary>
            <param name="name">
              The name string.
            </param>
            <returns>
              True if the name is valid and false otherwise.
            </returns>
        </member>
        <member name="M:MiCore.Naming.IsValid(MiCore.IIdentifiable{System.String})">
            <summary>
              If the name of the given object is valid.
            </summary>
            <param name="i">
              The object to check.
            </param>
            <returns>
              True if the name of the object is valid and false otherwise.
            </returns>
        </member>
        <member name="M:MiCore.Naming.AsValid(System.String,System.Char)">
            <summary>
              Returns the given string as a valid name.
            </summary>
            <param name="name">
              The possibly invalid name.
            </param>
            <param name="repl">
              The character used to replace invalid characters.
            </param>
            <returns>
              The given string as a valid name.
            </returns>
        </member>
        <member name="M:MiCore.Naming.AsValid(MiCore.IIdentifiable{System.String})">
            <summary>
              Returns the given objects' name as a valid name.
            </summary>
            <param name="i">
              The identifiable object.
            </param>
            <returns>
              The given object' invalid name as a valid ID.
            </returns>
        </member>
        <member name="M:MiCore.Naming.NewName(System.String)">
            <summary>
              Creates a psuedo-new, valid name with a given prefix.
            </summary>
            <param name="prefix">
              Prefixes the name numbers.
            </param>
            <returns>
              A new name.
            </returns>
        </member>
        <member name="M:MiCore.Naming.RandomName(System.UInt32)">
            <summary>
              Generates a random name string with the given length.
            </summary>
            <param name="length">
              The length of the name.
            </param>
            <returns>
              A random name with the given length or `string.Empty` if length is zero.
            </returns>
        </member>
        <member name="T:MiCore.MiNode`1">
            <summary>
              Base class for tree-based node objects.
            </summary>
        </member>
        <member name="M:MiCore.MiNode`1.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:MiCore.MiNode`1.#ctor(MiCore.MiNode{`0})">
            <summary>
              Copy constructor.
            </summary>
            <remarks>
              The coppied ID will have "_copy" appended.
            </remarks>
            <param name="n">
              The object to copy.
            </param>
        </member>
        <member name="M:MiCore.MiNode`1.#ctor(System.String,System.String,`0)">
            <summary>
              Constructor setting the ID and optionally the name and parent.
            </summary>
            <param name="id">
              Node ID.
            </param>
            <param name="name">
              Node name.
            </param>
            <param name="parent">
              The parent of the node.
            </param>
        </member>
        <member name="P:MiCore.MiNode`1.ID">
            <summary>
              The object ID.
            </summary>
        </member>
        <member name="P:MiCore.MiNode`1.Name">
            <summary>
              The object name.
            </summary>
        </member>
        <member name="P:MiCore.MiNode`1.Parent">
            <summary>
              The owning parent.
            </summary>
            <exception cref="T:System.ArgumentException">
              If trying to set parent to `this` or to a child node.
            </exception>
        </member>
        <member name="P:MiCore.MiNode`1.Parents">
            <summary>
              An array containing a bottom-up list of each parent node.
            </summary>
        </member>
        <member name="P:MiCore.MiNode`1.Children">
            <summary>
              Gets an array containing child nodes.
            </summary>
        </member>
        <member name="P:MiCore.MiNode`1.AllChildren">
            <summary>
              Gets an array containing all child nodes and their children.
            </summary>
        </member>
        <member name="P:MiCore.MiNode`1.HasParent">
            <summary>
              If the node has a parent.
            </summary>
        </member>
        <member name="P:MiCore.MiNode`1.HasChildren">
            <summary>
              If the node has any children.
            </summary>
        </member>
        <member name="P:MiCore.MiNode`1.ChildCount">
            <summary>
              The amount of immediate children the node has.
            </summary>
        </member>
        <member name="P:MiCore.MiNode`1.TotalChildCount">
            <summary>
              The total amount of child entities owned by the node and its children.
            </summary>
        </member>
        <member name="M:MiCore.MiNode`1.IsParent(`0)">
            <summary>
              Checks up the tree if the node is a parent or a parent of a parent.
            </summary>
            <param name="parent">
              The node to check.
            </param>
            <returns>
              True if the node is a parent or a parent of a parent, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.MiNode`1.HasChild(`0,System.Boolean)">
            <summary>
              If the node contains the given child.
            </summary>
            <param name="e">
              The child node.
            </param>
            <param name="recursive">
              If children of children should be checked.
            </param>
            <returns>
              True if the node contains the child, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.MiNode`1.HasChild(System.String,System.Boolean)">
            <summary>
              If the node contains a child with the given ID.
            </summary>
            <param name="id">
              The node ID.
            </param>
            <param name="recursive">
              If children of children should be checked.
            </param>
            <returns>
              True if the node contains a child with the given ID, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.MiNode`1.HasChildNamed(System.String,System.Boolean)">
            <summary>
              If the node contains a child with the given name.
            </summary>
            <param name="name">
              The node name.
            </param>
            <param name="recursive">
              If children of children should be checked.
            </param>
            <returns>
              True if the node contains a child with the given name, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.MiNode`1.GetChild(System.Int32)">
            <summary>
              Gets the child node at the given index.
            </summary>
            <param name="index">
              node index.
            </param>
            <returns>
              The node at the given index if it exists, otherwise null.
            </returns>
        </member>
        <member name="M:MiCore.MiNode`1.GetChild(System.String,System.Boolean)">
            <summary>
              Gets the child node with the given ID.
            </summary>
            <param name="id">
              node ID.
            </param>
            <param name="recursive">
              Should child entities be searched recursively.
            </param>
            <returns>
              The node with the given ID if it exists, otherwise null.
            </returns>
        </member>
        <member name="M:MiCore.MiNode`1.GetFirstChild(System.String,System.Boolean)">
            <summary>
              Gets the first child node with the given name.
            </summary>
            <param name="name">
              node name.
            </param>
            <param name="recursive">
              Should child entities be searched recursively.
            </param>
            <returns>
              The node with the given name if it exists, otherwise null.
            </returns>
        </member>
        <member name="M:MiCore.MiNode`1.GetLastChild(System.String,System.Boolean)">
            <summary>
              Gets the last child node with the given name.
            </summary>
            <param name="name">
              node name.
            </param>
            <param name="recursive">
              Should child entities be searched recursively.
            </param>
            <returns>
              The node with the given name if it exists, otherwise null.
            </returns>
        </member>
        <member name="M:MiCore.MiNode`1.GetChildren(System.String,System.Boolean)">
            <summary>
              Gets all child entities with the given name.
            </summary>
            <param name="name">
              node name.
            </param>
            <param name="recursive">
              Should child entities be searched recursively.
            </param>
            <returns>
              All child entities with the given name or an empty array if there are no matches.
            </returns>
        </member>
        <member name="M:MiCore.MiNode`1.AddChild(`0,System.Boolean)">
            <summary>
              Sets an node as a child of this object.
            </summary>
            <param name="e">
              The node to add as child.
            </param>
            <param name="replace">
              If an node with the same ID should be replaced?
            </param>
            <returns>
              True if e is already a child or if it was added successfully, false if e is null, 
              this, or  e is parent or .
            </returns>
        </member>
        <member name="M:MiCore.MiNode`1.AddChildren(`0[])">
            <summary>
              Adds multiple child nodes.
            </summary>
            <param name="nodes">
              Nodes to add as children.
            </param>
            <returns>
              True if all nodes were added successfully, otherwise false. Will also return false
              if <paramref name="nodes"/> is null.
            </returns>
        </member>
        <member name="M:MiCore.MiNode`1.RemoveChild(`0,System.Boolean)">
            <summary>
              Removes and disposes of the node if it is a child.
            </summary>
            <param name="e">
              The child node.
            </param>
            <param name="recursive">
              Should child entities be searched recursively.
            </param>
            <returns>
              True if e was a child and was removed successfully, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.MiNode`1.RemoveChild(System.Int32)">
            <summary>
              Removes and disposes of the child node at the given index.
            </summary>
            <param name="index">
              The child index.
            </param>
            <returns>
              True if a child existed at the given index and was removed successfully, otherwise
              false.
            </returns>
        </member>
        <member name="M:MiCore.MiNode`1.RemoveChild(System.String,System.Boolean)">
            <summary>
              Removes the child with the given ID.
            </summary>
            <param name="id">
              The child ID.
            </param>
            <param name="recursive">
              Should child entities be searched recursively.
            </param>
            <returns>
              True if a child existed and was removed successfully, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.MiNode`1.RemoveAllChildren">
            <summary>
              Removes and disposes of all child entities.
            </summary>
        </member>
        <member name="M:MiCore.MiNode`1.ReleaseChild(`0,System.Boolean)">
            <summary>
              Removes and returns the node if it is a child.
            </summary>
            <param name="ent">
              The child node.
            </param>
            <param name="recursive">
              Should child entities be searched recursively.
            </param>
            <returns>
              The removed node if it exists, otherwise null.
            </returns>
        </member>
        <member name="M:MiCore.MiNode`1.ReleaseChild(System.Int32)">
            <summary>
              Removes and returns the child node at the given index.
            </summary>
            <param name="index">
              The child index.
            </param>
            <returns>
              The removed node if it exists, otherwise null.
            </returns>
        </member>
        <member name="M:MiCore.MiNode`1.ReleaseChild(System.String,System.Boolean)">
            <summary>
              Removes and returns the child node with the given ID.
            </summary>
            <param name="id">
              The child ID.
            </param>
            <param name="recursive">
              Should child entities be searched recursively.
            </param>
            <returns>
              The removed node if it exists, otherwise null.
            </returns>
        </member>
        <member name="M:MiCore.MiNode`1.ReleaseAllChildren">
            <summary>
              Removes and returns all child entities.
            </summary>
            <returns>
              An array containing the removed child entities.
            </returns>
        </member>
        <member name="M:MiCore.MiNode`1.ChildIndex(`0)">
            <summary>
              Returns the index of the given child node.
            </summary>
            <param name="e">
              The child node.
            </param>
            <returns>
              The index of the child node if it exists, otherwise -1.
            </returns>
        </member>
        <member name="M:MiCore.MiNode`1.ChildIndex(System.String)">
            <summary>
              Returns the index of the given child node.
            </summary>
            <param name="id">
              The child node id.
            </param>
            <returns>
              The index of the child node if it exists, otherwise -1.
            </returns>
        </member>
        <member name="M:MiCore.MiNode`1.FirstChildIndex(System.String)">
            <summary>
              Returns the first index of the child with the given name.
            </summary>
            <param name="name">
              The child node name.
            </param>
            <returns>
              The index of the child node if it exists, otherwise -1.
            </returns>
        </member>
        <member name="M:MiCore.MiNode`1.LastChildIndex(System.String)">
            <summary>
              Returns the last index of the child with the given name.
            </summary>
            <param name="name">
              The child node name.
            </param>
            <returns>
              The index of the child node if it exists, otherwise -1.
            </returns>
        </member>
        <member name="M:MiCore.MiNode`1.LoadFromStream(System.IO.BinaryReader)">
            <summary>
              Attempts to deserialize the node and its children from the stream.
            </summary>
            <param name="sr">
              Stream reader.
            </param>
            <returns>
              True if deserialization succeeded and false otherwise.
            </returns>  
        </member>
        <member name="M:MiCore.MiNode`1.SaveToStream(System.IO.BinaryWriter)">
            <summary>
              Attempts to serialize the node and its chidren to the stream.
            </summary>
            <param name="sw">
              Stream writer.
            </param>
            <returns>
              True if serialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiCore.MiNode`1.LoadFromXml(System.Xml.XmlElement)">
            <summary>
              Attempts to load the object from the xml element.
            </summary>
            <param name="element">
              The xml element.
            </param>
            <returns>
              True if the object loaded successfully or false on failure.
            </returns>
        </member>
        <member name="M:MiCore.MiNode`1.ToString">
            <summary>
              Gets the object xml string.
            </summary>
            <returns>
              The xml string of the object.
            </returns>
        </member>
        <member name="M:MiCore.MiNode`1.Equals(`0)">
            <summary>
              Checks if this object is equal to another.
            </summary>
            <param name="other">
              The object to check against.
            </param>
            <returns>
              True if the given object is concidered equal to this object, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.MiNode`1.OnDispose">
            <summary>
              Disposes of the object.
            </summary>
        </member>
        <member name="M:MiCore.MiNode`1.GetEnumerator">
            <summary>
              Gets an enumerator that can be used to iterate through the child nodes.
            </summary>
            <returns>
              An enumerator that can be used to iterate through the child collection.
            </returns>
        </member>
        <member name="T:MiCore.ISerializable`2">
            <summary>
              Interface for objects that can be serialized/deserialized to/from a file.
            </summary>
            <typeparam name="ReadT">
              The stream reader type used to deserialize the object from a stream.
            </typeparam>
            <typeparam name="WriteT">
              The stream writer type used to serialize the object to a stream.
            </typeparam>
        </member>
        <member name="M:MiCore.ISerializable`2.LoadFromStream(`0)">
            <summary>
              Attempts to deserialize the object from the stream.
            </summary>
            <param name="sr">
              Stream reader.
            </param>
            <returns>
              True if deserialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiCore.ISerializable`2.SaveToStream(`1)">
            <summary>
              Attempts to serialize the object to the stream.
            </summary>
            <param name="sw">
              Stream writer.
            </param>
            <returns>
              True if serialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="T:MiCore.ITextSerializable">
            <summary>
              Interface for objects that can be serialized/deserialized to/from text files.
            </summary>
        </member>
        <member name="T:MiCore.IBinarySerializable">
            <summary>
              Interface for objects that are be serialized/deserialized to/from binary files.
            </summary>
        </member>
        <member name="T:MiCore.IXmlSerializable">
            <summary>
              Interface for objects that are be serialized/deserialized to/from xml files
              procedurally.
            </summary>
        </member>
        <member name="T:MiCore.IXmlLoadable">
            <summary>
              Interface for objects that can be loaded from an xml element.
            </summary>
        </member>
        <member name="M:MiCore.IXmlLoadable.LoadFromXml(System.Xml.XmlElement)">
            <summary>
              Attempts to load the object from the xml element.
            </summary>
            <param name="element">
              The xml element.
            </param>
            <returns>
              True if the object was successfully loaded, otherwise false.
            </returns>
        </member>
        <member name="T:MiCore.TextSerializable">
            <summary>
              Base class for objects that are be serialized/deserialized to/from text files.
            </summary>
        </member>
        <member name="M:MiCore.TextSerializable.LoadFromStream(System.IO.StreamReader)">
            <summary>
              Attempts to deserialize the object from the stream.
            </summary>
            <param name="sr">
              Stream reader.
            </param>
            <returns>
              True if deserialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiCore.TextSerializable.SaveToStream(System.IO.StreamWriter)">
            <summary>
              Attempts to serialize the object to the stream.
            </summary>
            <remarks>
              Default implementation attempts to write <see cref="M:MiCore.TextSerializable.ToString"/> to stream so either override this or
              <see cref="M:MiCore.TextSerializable.ToString"/>.
            </remarks>
            <param name="sw">
              Stream writer.
            </param>
            <returns>
              True if serialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiCore.TextSerializable.ToString">
            <summary>
              Returns the object string as it would be written in file.
            </summary>
            <returns>
              The object string as it would be written in file.
            </returns>
        </member>
        <member name="M:MiCore.TextSerializable.FromFile``1(System.String)">
            <summary>
              Constructs an object of type T and attempts to deserialize it from file.
            </summary>
            <typeparam name="T">
              The type of object to deserialize.
            </typeparam>
            <param name="path">
              The file path.
            </param>
            <returns>
              A new object of type T deserialzed from file on success, otherwise null.
            </returns>
        </member>
        <member name="M:MiCore.TextSerializable.ToFile``1(``0,System.String,System.Boolean)">
            <summary>
              Attempts to serialize the object to file.
            </summary>
            <param name="t">
              The object to save to file.
            </param>
            <param name="path">
              The file path.
            </param>
            <param name="replace">
              If a file already exists at <paramref name="path"/>, should it be replaced?
            </param>
            <returns>
              True if <paramref name="path"/> is valid and data is successfully written to file, otherwise false. Also
              returns false if a file already exists at <paramref name="path"/> and <paramref name="replace"/> is false.
            </returns>
        </member>
        <member name="T:MiCore.BinarySerializable">
            <summary>
              Base class for objects that are be serialized/deserialized to/from 
              binary files.
            </summary>
        </member>
        <member name="M:MiCore.BinarySerializable.LoadFromStream(System.IO.BinaryReader)">
            <summary>
              Attempts to deserialize the object from the stream.
            </summary>
            <param name="sr">
              Stream reader.
            </param>
            <returns>
              True if deserialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiCore.BinarySerializable.SaveToStream(System.IO.BinaryWriter)">
            <summary>
              Attempts to serialize the object to the stream.
            </summary>
            <param name="sw">
              Stream writer.
            </param>
            <returns>
              True if serialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiCore.BinarySerializable.FromFile``1(System.String)">
            <summary>
              Constructs an object of type T and attempts to deserialize from file.
            </summary>
            <typeparam name="T">
              The type of object to deserialize.
            </typeparam>
            <param name="path">
              The file path.
            </param>
            <returns>
              A new object of type T deserialzed from file on success, otherwise null.
            </returns>
        </member>
        <member name="M:MiCore.BinarySerializable.ToFile``1(``0,System.String,System.Boolean)">
            <summary>
              Attempts to serialize an object to file.
            </summary>
            <param name="t">
              The object to save to file.
            </param>
            <param name="path">
              The file path.
            </param>
            <param name="replace">
              If a file already exists at <paramref name="path"/>, should it be replaced?
            </param>
            <returns>
              True if <paramref name="path"/> is valid and data is successfully written to file, otherwise false. Also
              returns false if a file already exists at <paramref name="path"/> and <paramref name="replace"/> is false.
            </returns>
        </member>
        <member name="T:MiCore.XmlSerializable">
            <summary>
              Base class for objects that are be serialized/deserialized to/from 
              xml files procedurally.
            </summary>
        </member>
        <member name="M:MiCore.XmlSerializable.LoadFromStream(System.Xml.XmlReader)">
            <summary>
              Attempts to deserialize the object from the stream.
            </summary>
            <param name="sr">
              Stream reader.
            </param>
            <returns>
              True if deserialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="M:MiCore.XmlSerializable.SaveToStream(System.Xml.XmlWriter)">
            <summary>
              Attempts to serialize the object to the stream.
            </summary>
            <param name="sw">
              Stream writer.
            </param>
            <returns>
              True if serialization succeeded and false otherwise.
            </returns>
        </member>
        <member name="T:MiCore.XmlLoadable">
            <summary>
              Base class for objects that can be loaded from an xml element.
            </summary>
        </member>
        <member name="M:MiCore.XmlLoadable.LoadFromXml(System.Xml.XmlElement)">
            <summary>
              Attempts to load the object from the xml element.
            </summary>
            <param name="element">
              The xml element.
            </param>
            <returns>
              True if the object was successfully loaded and false otherwise.
            </returns>
        </member>
        <member name="M:MiCore.XmlLoadable.ToString">
            <summary>
              Converts the object to an xml string.
            </summary>
            <returns>
              Returns the object to an xml string.
            </returns>
        </member>
        <member name="M:MiCore.XmlLoadable.ToString(System.UInt32)">
            <summary>
              Converts the object to an xml string with the given indentation level.
            </summary>
            <param name="indent">
              Indentation level.
            </param>
            <returns>
              Returns the object to an xml string with the given indentation level.
            </returns>
        </member>
        <member name="M:MiCore.XmlLoadable.ToString(MiCore.IXmlLoadable,System.UInt32)">
            <summary>
              Converts the object to an xml string with optional indentation.
            </summary>
            <param name="xl">
              The object.
            </param>
            <param name="indent">
              Indentation level.
            </param>
            <returns>
              Returns the object to an xml string with the given indentation level.
            </returns>
        </member>
        <member name="M:MiCore.XmlLoadable.FromElement``1(System.Xml.XmlElement)">
            <summary>
              Attempts to create a new object from the xml element.
            </summary>
            <typeparam name="T">
              The type of object to load.
            </typeparam>
            <param name="element">
              The xml element.
            </param>
            <returns>
              A valid object of type T loaded from the xml element on success and null on failure.
            </returns>
        </member>
        <member name="M:MiCore.XmlLoadable.FromFile``1(System.String,System.String,System.Xml.XmlNamespaceManager)">
            <summary>
              Attempts to create a new object loaded from xml at the given path.
            </summary>
            <typeparam name="T">
              The type to load.
            </typeparam>
            <param name="path">
              The path of the xml document.
            </param>
            <param name="xpath">
              Optional xpath expression to select a single node to load from.
            </param>
            <param name="nsm">
              Optional xml namespace manager.
            </param>
            <returns>
              A valid object of type T on success and null on failure.
            </returns>
        </member>
        <member name="M:MiCore.XmlLoadable.FromXml``1(System.String,System.String,System.Xml.XmlNamespaceManager)">
            <summary>
              Attempts to create a new object from a string.
            </summary>
            <typeparam name="T">
              The type to load.
            </typeparam>
            <param name="xml">
              The xml string.
            </param>
            <param name="xpath">
              Optional xpath expression to select a single node to load from.
            </param>
            <param name="nsm">
              Optional xml namespace manager.
            </param>
            <returns>
              A valid object of type T on success and null on failure.
            </returns>
        </member>
        <member name="M:MiCore.XmlLoadable.ToFile(MiCore.IXmlLoadable,System.String,System.Boolean)">
            <summary>
              Attempts to save XmlLoadable object to file.
            </summary>
            <remarks>
              Please note <see cref="F:MiCore.Xml.Header"/> will be written at the beginning of the file
              before the file data.
            </remarks>
            <param name="x">
              The object to save.
            </param>
            <param name="path">
              The path to save the object to.
            </param>
            <param name="overwrite">
              If an already existing file should be overwritten.
            </param>
            <returns>
              True if the object was written to file successfully, otherwise false.
            </returns>
        </member>
        <member name="T:MiCore.TestModule">
            <summary>
              Base class for test modules.
            </summary>
        </member>
        <member name="M:MiCore.TestModule.RunTest(SFML.Graphics.RenderWindow)">
            <summary>
              Run module tests.
            </summary>
            <returns>
              True if tests succeeded, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.TestModule.OnTest">
            <summary>
              Override this to run your module tests.
            </summary>
            <returns>
              True if tests succeeded, otherwise false.
            </returns>
        </member>
        <member name="T:MiCore.VisualTestModule">
            <summary>
              Base class for test modules that also require a visual test.
            </summary>
        </member>
        <member name="M:MiCore.VisualTestModule.RunTest(SFML.Graphics.RenderWindow)">
            <summary>
              Run module tests.
            </summary>
            <returns>
              True if tests succeeded, otherwise false.
            </returns>
        </member>
        <member name="M:MiCore.VisualTestModule.OnVisualTest(SFML.Graphics.RenderWindow)">
            <summary>
              Run visual module tests.
            </summary>
            <param name="window">
              The render window.
            </param>
            <returns>
              True if tests succeeded, otherwise false.
            </returns>
        </member>
        <member name="T:MiCore.Testing">
            <summary>
              Contains test related functionality.
            </summary>
        </member>
        <member name="M:MiCore.Testing.Test``1(SFML.Graphics.RenderWindow)">
            <summary>
              Runs a test module by type.
            </summary>
            <typeparam name="T">
              The type of test module to run.
            </typeparam>
            <param name="window">
              The render window.
            </param>
            <returns>
              True if tests succeeded, otherwise false.
            </returns>
        </member>
        <member name="T:MiCore.Xml">
            <summary>
              Contains xml helper functionality.
            </summary>
        </member>
        <member name="F:MiCore.Xml.Header">
            <summary>
              Standard xml header.
            </summary>
        </member>
        <member name="M:MiCore.Xml.ToString(SFML.System.Vector2f,System.String,System.UInt32)">
            <summary>
              Gets the vector xml string.
            </summary>
            <param name="vec">
              The vector.
            </param>
            <param name="name">
              Xml element name.
            </param>
            <param name="indent">
              Indentation level.
            </param>
            <returns>
              The given vector as an xml string.
            </returns>
        </member>
        <member name="M:MiCore.Xml.ToString(SFML.System.Vector2i,System.String,System.UInt32)">
            <summary>
              Gets the vector xml string.
            </summary>
            <param name="vec">
              The vector.
            </param>
            <param name="name">
              Xml element name.
            </param>
            <param name="indent">
              Indentation level.
            </param>
            <returns>
              The given vector as an xml string.
            </returns>
        </member>
        <member name="M:MiCore.Xml.ToString(SFML.System.Vector2u,System.String,System.UInt32)">
            <summary>
              Gets the vector xml string.
            </summary>
            <param name="vec">
              The vector.
            </param>
            <param name="name">
              Xml element name.
            </param>
            <param name="indent">
              Indentation level.
            </param>
            <returns>
              The given vector as an xml string.
            </returns>
        </member>
        <member name="M:MiCore.Xml.ToString(SFML.Graphics.FloatRect,System.String,System.UInt32)">
            <summary>
              Gets the rect xml string.
            </summary>
            <param name="rect">
              The rect.
            </param>
            <param name="name">
              Xml element name.
            </param>
            <param name="indent">
              Indentation level.
            </param>
            <returns>
              The given rect as an xml string.
            </returns>
        </member>
        <member name="M:MiCore.Xml.ToString(SFML.Graphics.IntRect,System.String,System.UInt32)">
            <summary>
              Gets the rect xml string.
            </summary>
            <param name="rect">
              The rect.
            </param>
            <param name="name">
              Xml element name.
            </param>
            <param name="indent">
              Indentation level.
            </param>
            <returns>
              The given rect as an xml string.
            </returns>
        </member>
        <member name="M:MiCore.Xml.ToString(SFML.Graphics.Color,System.String,System.UInt32)">
            <summary>
              Gets the rect xml string.
            </summary>
            <param name="col">
              The rect.
            </param>
            <param name="name">
              Xml element name.
            </param>
            <param name="indent">
              Indentation level.
            </param>
            <returns>
              The given rect as an xml string.
            </returns>
        </member>
        <member name="M:MiCore.Xml.ToString(SFML.Window.VideoMode,System.String,System.UInt32)">
            <summary>
              Gets the video mode xml string.
            </summary>
            <param name="vm">
              The video mode.
            </param>
            <param name="name">
              Xml element name.
            </param>
            <param name="indent">
              Indentation level.
            </param>
            <returns>
              The given video mode as an xml string.
            </returns>
        </member>
        <member name="M:MiCore.Xml.ToVec2f(System.Xml.XmlElement)">
            <summary>
              Attempts to load a vector from an xml element.
            </summary>
            <param name="ele">
              The element to load from.
            </param>
            <returns>
              A valid vector on success or null on failure.
            </returns>
        </member>
        <member name="M:MiCore.Xml.ToVec2i(System.Xml.XmlElement)">
            <summary>
              Attempts to load a vector from an xml element.
            </summary>
            <param name="ele">
              The element to load from.
            </param>
            <returns>
              A valid vector on success or null on failure.
            </returns>
        </member>
        <member name="M:MiCore.Xml.ToVec2u(System.Xml.XmlElement)">
            <summary>
              Attempts to load a vector from an xml element.
            </summary>
            <param name="ele">
              The element to load from.
            </param>
            <returns>
              A valid vector on success or null on failure.
            </returns>
        </member>
        <member name="M:MiCore.Xml.ToFRect(System.Xml.XmlElement)">
            <summary>
              Attempts to load a rect from an xml element.
            </summary>
            <param name="ele">
              The element to load from.
            </param>
            <returns>
              A valid rect on success or null on failure.
            </returns>
        </member>
        <member name="M:MiCore.Xml.ToIRect(System.Xml.XmlElement)">
            <summary>
              Attempts to load a rect from an xml element.
            </summary>
            <param name="ele">
              The element to load from.
            </param>
            <returns>
              A valid rect on success or null on failure.
            </returns>
        </member>
        <member name="M:MiCore.Xml.ToColor(System.Xml.XmlElement)">
            <summary>
              Attempts to load a color from an xml element.
            </summary>
            <param name="ele">
              The element to load from.
            </param>
            <returns>
              A valid color on success or null on failure.
            </returns>
        </member>
        <member name="M:MiCore.Xml.ToVideoMode(System.Xml.XmlElement)">
            <summary>
              Attempts to load a video mode from an xml element.
            </summary>
            <param name="ele">
              The element to load from.
            </param>
            <returns>
              A valid video mode on success or null on failure.
            </returns>
        </member>
        <member name="M:MiCore.Xml.Indent(System.String,System.UInt32)">
            <summary>
              Indents each line of the string a set amount of times.
            </summary>
            <param name="lines">
              The string to indent.
            </param>
            <param name="indent">
              The amount of tabs to use for indentation.
            </param>
            <returns>
              The given string indented with the given amount of tabs, or just tabs if the string is
              null or empty.
            </returns>
        </member>
    </members>
</doc>
